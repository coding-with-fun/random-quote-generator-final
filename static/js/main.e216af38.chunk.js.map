{"version":3,"sources":["components/Footer.js","components/Navbar.js","context/QuotesContext.js","api/Quotes.api.js","components/Quote.js","App.js","serviceWorker.js","index.js"],"names":["Footer","className","href","Navbar","to","QuotesContext","createContext","QuotesProvider","props","useState","quoteData","setQuoteData","localStorage","getItem","skip","setSkip","useEffect","RandomQuote","limit","Axios","get","BASE_URL","fetchRandomQuote","then","response","quote","data","results","parseInt","setItem","catch","error","console","Provider","value","children","Quote","useContext","content","author","currentQuote","setCurrentQuote","currentIndex","setCurrentIndex","length","class","title","disabled","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"mPAsBeA,EApBA,WACX,OACI,6BACI,yBAAKC,UAAU,6CACX,yBAAKA,UAAU,iCAAf,YACc,IACV,8BACI,uBAAGA,UAAU,kBACT,IAJZ,MAKQ,IACJ,8BACI,uBAAGA,UAAU,oBACT,IARZ,MASO,uBAAGC,KAAK,gCAAR,aCARC,EAZA,WACX,OACI,6BACI,yBAAKF,UAAU,wDACX,kBAAC,IAAD,CAAMG,GAAG,IAAIH,UAAU,gBAAvB,iB,gCCJHI,EAAgBC,0BAEhBC,EAAiB,SAACC,GAAW,IAAD,EACHC,mBAAS,IADN,mBAC9BC,EAD8B,KACnBC,EADmB,OAEbF,mBAASG,aAAaC,QAAQ,SAAW,GAF5B,mBAE9BC,EAF8B,KAExBC,EAFwB,KAKrCC,qBAAU,WACNC,MAED,IAEH,IAAMA,EAAc,YCXQ,SAACC,EAAOJ,GACpC,OAAOK,IAAMC,IAAIC,wCAA8BH,EAAQ,SAAWJ,IDW9DQ,CARU,GAQcR,GACnBS,MAAK,SAACC,GACHb,GAAa,SAACc,GAAD,4BAAeA,GAAf,YAAyBD,EAASE,KAAKC,aACpDZ,EAAQa,SAASd,EAAM,IAAMc,SAX3B,GAW2C,KACzCd,EAAO,MACPC,EAAQ,GAEZH,aAAaiB,QAAQ,OAAQf,MAEhCgB,OAAM,SAACC,GAAD,OAAWC,QAAQD,MAAMA,OAGxC,OACI,kBAAC1B,EAAc4B,SAAf,CAAwBC,MAAO,CAAExB,YAAWO,gBACvCT,EAAM2B,WEoCJC,EA/DD,WAAO,IAAD,IACmBC,qBAAWhC,GAAtCK,EADQ,EACRA,UAAWO,EADH,EACGA,YADH,EAGwBR,mBAAS,CAC7C6B,QAAS,GACTC,OAAQ,KALI,mBAGTC,EAHS,KAGKC,EAHL,OAOwBhC,mBAAS,GAPjC,mBAOTiC,EAPS,KAOKC,EAPL,KAiBhB,OARA3B,qBAAU,WACF0B,IAAiBhC,EAAUkC,OAAS,GACpC3B,IAEJP,EAAUgC,IAAiBD,EAAgB/B,EAAUgC,MAEtD,CAAChC,EAAWgC,IAGX,yBAAKzC,UAAU,mBACX,yBAAKA,UAAU,wBACX,yBAAKA,UAAU,cACe,KAAzBuC,EAAaF,QACV,yBAAKrC,UAAU,qBACX,yBAAKA,UAAU,YAGnB,kBAAC,WAAD,KACI,yBAAKA,UAAU,WACVuC,EAAaF,SAElB,4BAAQO,MAAM,qBACV,0BAAMC,MAAM,gBACPN,EAAaD,WAMlC,yBAAKtC,UAAU,qBACX,4BACI8C,SAA2B,IAAjBL,EACVM,QAAS,WACLL,EAAgBD,EAAe,KAHvC,QAQA,4BACIK,WACI,UAACrC,EAAUgC,EAAe,UAA1B,aAAC,EAA6BJ,SAElCU,QAAS,WACLL,EAAgBD,EAAe,KALvC,YChCLO,MAZf,WACI,OACI,6BACI,kBAAC,IAAD,KACI,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,S,MCAIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,QAGRC,SAASC,eAAe,SDsHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvC,MAAK,SAAAwC,GACJA,EAAaC,gBAEdlC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMkC,c","file":"static/js/main.e216af38.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Footer = () => {\n    return (\n        <div>\n            <nav className=\"navbar fixed-bottom navbar-light bg-light\">\n                <div className=\"navbar-text w-100 text-center\">\n                    Made with{\" \"}\n                    <span>\n                        <i className=\"fas fa-heart\"></i>\n                    </span>{\" \"}\n                    and{\" \"}\n                    <span>\n                        <i className=\"fas fa-mug-hot\"></i>\n                    </span>{\" \"}\n                    by <a href=\"https://github.com/harsh2124\">Harsh</a>\n                </div>\n            </nav>\n        </div>\n    );\n};\n\nexport default Footer;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Navbar = () => {\n    return (\n        <div>\n            <nav className=\"navbar navbar-expand fixed-top navbar-light bg-light\">\n                <Link to=\"/\" className=\"navbar-brand\">\n                    Wise Words\n                </Link>\n            </nav>\n        </div>\n    );\n};\n\nexport default Navbar;\n","import React, { createContext, useEffect, useState } from \"react\";\nimport { fetchRandomQuote } from \"../api/Quotes.api\";\n\nexport const QuotesContext = createContext();\n\nexport const QuotesProvider = (props) => {\n    const [quoteData, setQuoteData] = useState([]);\n    const [skip, setSkip] = useState(localStorage.getItem(\"skip\") || 0);\n    const limit = 10;\n\n    useEffect(() => {\n        RandomQuote();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const RandomQuote = () => {\n        fetchRandomQuote(limit, skip)\n            .then((response) => {\n                setQuoteData((quote) => [...quote, ...response.data.results]);\n                setSkip(parseInt(skip, 10) + parseInt(limit, 10));\n                if (skip > 1995) {\n                    setSkip(0);\n                }\n                localStorage.setItem(\"skip\", skip);\n            })\n            .catch((error) => console.error(error));\n    };\n\n    return (\n        <QuotesContext.Provider value={{ quoteData, RandomQuote }}>\n            {props.children}\n        </QuotesContext.Provider>\n    );\n};\n","import Axios from \"axios\";\n\nconst BASE_URL = \"https://api.quotable.io\";\n\nexport const fetchRandomQuote = (limit, skip) => {\n    return Axios.get(BASE_URL + \"/quotes?limit=\" + limit + \"&skip=\" + skip);\n};\n","import React, { Fragment, useContext, useEffect, useState } from \"react\";\nimport { QuotesContext } from \"../context/QuotesContext\";\n\nconst Quote = () => {\n    const { quoteData, RandomQuote } = useContext(QuotesContext);\n\n    const [currentQuote, setCurrentQuote] = useState({\n        content: \"\",\n        author: \"\",\n    });\n    const [currentIndex, setCurrentIndex] = useState(0);\n\n    useEffect(() => {\n        if (currentIndex === quoteData.length - 1) {\n            RandomQuote();\n        }\n        quoteData[currentIndex] && setCurrentQuote(quoteData[currentIndex]);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [quoteData, currentIndex]);\n\n    return (\n        <div className=\"card__container\">\n            <div className=\"card__body container\">\n                <div className=\"card__data\">\n                    {currentQuote.content === \"\" ? (\n                        <div className=\"loader__container\">\n                            <div className=\"loader\"></div>\n                        </div>\n                    ) : (\n                        <Fragment>\n                            <div className=\"content\">\n                                {currentQuote.content}\n                            </div>\n                            <footer class=\"blockquote-footer\">\n                                <cite title=\"Source Title\">\n                                    {currentQuote.author}\n                                </cite>\n                            </footer>\n                        </Fragment>\n                    )}\n                </div>\n                <div className=\"button__container\">\n                    <button\n                        disabled={currentIndex === 0 ? true : false}\n                        onClick={() => {\n                            setCurrentIndex(currentIndex - 1);\n                        }}\n                    >\n                        Prev\n                    </button>\n                    <button\n                        disabled={\n                            !quoteData[currentIndex + 1]?.content ? true : false\n                        }\n                        onClick={() => {\n                            setCurrentIndex(currentIndex + 1);\n                        }}\n                    >\n                        Next\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Quote;\n","import React from \"react\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport Footer from \"./components/Footer\";\nimport Navbar from \"./components/Navbar\";\nimport Quote from \"./components/Quote\";\n\nfunction App() {\n    return (\n        <div>\n            <Router>\n                <Navbar />\n                <Quote />\n                <Footer />\n            </Router>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { QuotesProvider } from \"./context/QuotesContext\";\nimport \"./scss/index.scss\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <QuotesProvider>\n            <App />\n        </QuotesProvider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}